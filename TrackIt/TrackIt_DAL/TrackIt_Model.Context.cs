//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrackIt_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrackItConStr : DbContext
    {
        public TrackItConStr()
            : base("name=TrackItConStr")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<Participant_Activity_Tracker> Participant_Activity_Tracker { get; set; }
    
        public virtual ObjectResult<string> uspInsertActivity(Nullable<int> class_ID, string activity_Name, Nullable<System.DateTime> activity_EDT)
        {
            var class_IDParameter = class_ID.HasValue ?
                new ObjectParameter("Class_ID", class_ID) :
                new ObjectParameter("Class_ID", typeof(int));
    
            var activity_NameParameter = activity_Name != null ?
                new ObjectParameter("Activity_Name", activity_Name) :
                new ObjectParameter("Activity_Name", typeof(string));
    
            var activity_EDTParameter = activity_EDT.HasValue ?
                new ObjectParameter("Activity_EDT", activity_EDT) :
                new ObjectParameter("Activity_EDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertActivity", class_IDParameter, activity_NameParameter, activity_EDTParameter);
        }
    
        public virtual ObjectResult<string> uspInsertActivityTracker(Nullable<int> p_PSNo, string activityName)
        {
            var p_PSNoParameter = p_PSNo.HasValue ?
                new ObjectParameter("P_PSNo", p_PSNo) :
                new ObjectParameter("P_PSNo", typeof(int));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertActivityTracker", p_PSNoParameter, activityNameParameter);
        }
    
        public virtual ObjectResult<string> uspInsertBatch(Nullable<int> class_ID, Nullable<int> f_PSNo, Nullable<int> p_PSNo)
        {
            var class_IDParameter = class_ID.HasValue ?
                new ObjectParameter("Class_ID", class_ID) :
                new ObjectParameter("Class_ID", typeof(int));
    
            var f_PSNoParameter = f_PSNo.HasValue ?
                new ObjectParameter("F_PSNo", f_PSNo) :
                new ObjectParameter("F_PSNo", typeof(int));
    
            var p_PSNoParameter = p_PSNo.HasValue ?
                new ObjectParameter("P_PSNo", p_PSNo) :
                new ObjectParameter("P_PSNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertBatch", class_IDParameter, f_PSNoParameter, p_PSNoParameter);
        }
    
        public virtual ObjectResult<string> uspInsertFaculty(Nullable<int> f_PSNo, string f_EmailId, string f_Name)
        {
            var f_PSNoParameter = f_PSNo.HasValue ?
                new ObjectParameter("F_PSNo", f_PSNo) :
                new ObjectParameter("F_PSNo", typeof(int));
    
            var f_EmailIdParameter = f_EmailId != null ?
                new ObjectParameter("F_EmailId", f_EmailId) :
                new ObjectParameter("F_EmailId", typeof(string));
    
            var f_NameParameter = f_Name != null ?
                new ObjectParameter("F_Name", f_Name) :
                new ObjectParameter("F_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertFaculty", f_PSNoParameter, f_EmailIdParameter, f_NameParameter);
        }
    
        public virtual ObjectResult<string> uspInsertParticipant(Nullable<int> p_PSNo, string p_EmailId, string p_Name)
        {
            var p_PSNoParameter = p_PSNo.HasValue ?
                new ObjectParameter("P_PSNo", p_PSNo) :
                new ObjectParameter("P_PSNo", typeof(int));
    
            var p_EmailIdParameter = p_EmailId != null ?
                new ObjectParameter("P_EmailId", p_EmailId) :
                new ObjectParameter("P_EmailId", typeof(string));
    
            var p_NameParameter = p_Name != null ?
                new ObjectParameter("P_Name", p_Name) :
                new ObjectParameter("P_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertParticipant", p_PSNoParameter, p_EmailIdParameter, p_NameParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateActivityTracker(Nullable<int> p_PSNo, string activityName, string activity_Status, string gitUrl)
        {
            var p_PSNoParameter = p_PSNo.HasValue ?
                new ObjectParameter("P_PSNo", p_PSNo) :
                new ObjectParameter("P_PSNo", typeof(int));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var activity_StatusParameter = activity_Status != null ?
                new ObjectParameter("Activity_Status", activity_Status) :
                new ObjectParameter("Activity_Status", typeof(string));
    
            var gitUrlParameter = gitUrl != null ?
                new ObjectParameter("GitUrl", gitUrl) :
                new ObjectParameter("GitUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateActivityTracker", p_PSNoParameter, activityNameParameter, activity_StatusParameter, gitUrlParameter);
        }
    }
}
